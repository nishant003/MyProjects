{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red46\green116\blue182;}
{\*\expandedcolortbl;;\csgenericrgb\c18039\c45490\c71373;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 Project description\
\
In a typical zero sum two player game, players are generally competing for a certain common resource, and their gain is a function of their share of the resource. Often players have other challenges such as satisfying other constraints on other personal resources such as time, energy or computational power in the course of the game. Here, we introduce The Fruit Rage! a game that captures the nature of a zero sum two player game with strict limitation on allocated time for reasoning.\
The task is creating a software agent that can play this game against a human or another agent. Rules of the game\
The Fruit Rage is a two player game in which each player tries to maximize his/her share from a batch of fruits randomly placed in a box. The box is divided into cells and each cell is either empty or filled with one fruit of a specific type.\
At the beginning of each game, all cells are filled with fruits. Players play in turn and can pick a cell of the box in their own turn and claim all fruit of the same type, in all cells that are connected to the selected cell through horizontal and vertical paths. For each selection or move the agent is rewarded a numeric value which is the square of the number of fruits claimed in that move. Once an agent picks the fruits from the cells, their empty place will be filled with other fruits on top of them (which fall down due to gravity), if any. In this game, no fruit is added during game play. Hence, players play until all fruits have been claimed.\
Another big constraint of this game is that every agent has a limited amount of time to spend for thinking during the whole game. Spending more than the original allocated time will be penalized harshly. Each player is allocated a fixed total amount of time.\
\
Input: The file input.txt in the current directory of your program will be formatted as follows:\
\
\pard\pardeftab720\partightenfactor0
\cf2 First line: \cf0 integer n, the width and height of the square board (0 < n \'a3 26)\
\cf2 Second line: \cf0 integer p, the number of fruit types (0 < p \'a3 9)\
\cf2 Third line: \cf0 strictly positive floating point number, your remaining time in seconds\
\cf2 Next n lines: \cf0 the n x n board, with one board row per input file line, and n characters (plus end-of- line marker) on each line. Each character can be either a digit from 0 to p-1, or a * to denote an empty cell. Note: for ease of parsing, the extra horizontal and vertical lines shown in figures 1 \'96 5 will not be present in the actual input.txt.\
\
Output: The file output.txt which your program creates in the current directory should be\
formatted as follows:\
\
\cf2 First line: \cf0 your selected move, represented as two characters:\
A letter from A to Z representing the column number (where A is the leftmost column, B is the next one to the right, etc), and A number from 1 to 26 representing the row number (where 1 is the top row, 2 is the row below it, etc).\
\cf2 Next n lines: \cf0 the n x n board just after your move and after gravity has been applied to make any fruits fall into holes created by your move taking away some fruits}